// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// clusterize
SEXP clusterize(const NumericMatrix& X, double threshold);
RcppExport SEXP _supc_clusterize(SEXP XSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(clusterize(X, threshold));
    return rcpp_result_gen;
END_RCPP
}
// test_dgemm
void test_dgemm(NumericMatrix a, NumericMatrix b, NumericMatrix retval);
RcppExport SEXP _supc_test_dgemm(SEXP aSEXP, SEXP bSEXP, SEXP retvalSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type retval(retvalSEXP);
    test_dgemm(a, b, retval);
    return R_NilValue;
END_RCPP
}
// supc1_cpp
NumericMatrix supc1_cpp(NumericMatrix x, double tau, Function RT, double tolerance, Function dist, bool verbose);
RcppExport SEXP _supc_supc1_cpp(SEXP xSEXP, SEXP tauSEXP, SEXP RTSEXP, SEXP toleranceSEXP, SEXP distSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< Function >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< Function >::type dist(distSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(supc1_cpp(x, tau, RT, tolerance, dist, verbose));
    return rcpp_result_gen;
END_RCPP
}
// supc1_cpp2
NumericMatrix supc1_cpp2(NumericMatrix x, double tau, Function RT, double tolerance, bool verbose);
RcppExport SEXP _supc_supc1_cpp2(SEXP xSEXP, SEXP tauSEXP, SEXP RTSEXP, SEXP toleranceSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< Function >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(supc1_cpp2(x, tau, RT, tolerance, verbose));
    return rcpp_result_gen;
END_RCPP
}
// supc_random_cpp
NumericMatrix supc_random_cpp(NumericMatrix x, double tau, Function RT, int k, List groups, double tolerance, bool verbose);
RcppExport SEXP _supc_supc_random_cpp(SEXP xSEXP, SEXP tauSEXP, SEXP RTSEXP, SEXP kSEXP, SEXP groupsSEXP, SEXP toleranceSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< Function >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< List >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(supc_random_cpp(x, tau, RT, k, groups, tolerance, verbose));
    return rcpp_result_gen;
END_RCPP
}
// test_dist
NumericVector test_dist(NumericMatrix x);
RcppExport SEXP _supc_test_dist(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(test_dist(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_supc_clusterize", (DL_FUNC) &_supc_clusterize, 2},
    {"_supc_test_dgemm", (DL_FUNC) &_supc_test_dgemm, 3},
    {"_supc_supc1_cpp", (DL_FUNC) &_supc_supc1_cpp, 6},
    {"_supc_supc1_cpp2", (DL_FUNC) &_supc_supc1_cpp2, 5},
    {"_supc_supc_random_cpp", (DL_FUNC) &_supc_supc_random_cpp, 7},
    {"_supc_test_dist", (DL_FUNC) &_supc_test_dist, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_supc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
